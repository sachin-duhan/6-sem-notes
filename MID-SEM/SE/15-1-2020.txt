--------- Jan 15 2020 ----------

Feasilbilty study revolve aournd:

Analysis -> Design -> Coding -> Testing -> Delivary and maintainance

Feasibility of the application of the software

===============================

SDLC - software development life cycle!

----- TELOS ------
T = technical - means that is it technicalluy possilbe to built the software
E = Economic - is it possible to built in the application in the given fund and budget
L = legal - is it legal to build
O = operational - is machine compatible enough of running the applicaion 
S = schedule - avialability of time!!

===============================

WATER Fall MODEL 
when the software is bulit in phases strictly ordered and we can come back to initial stage like water fall

------------------ ADVANTAGES ------------------

1. Simple - easy to understand
2. Strutured approach
3. Works well with small project!
4. fully working design docuement is present in the beginging itself
5. suitable for project with fixed requirements

------------- DISADVANTAGES -------------------

1. Difficult to define all requirements at beginging
2. not suitable fir accomodating any change!
3. a wokring vesion of the sstem is not avialble until late in project life!!
4. not suitable for large projects!
5. real projects are rarely sequential!

important Question : Explain water fall model, write advantes and disadvantages!

========================================================================
			PROTOTYPING MODEL
========================================================================

1. requirements -> 2. quick design -> 3. implementaion -> 4. customer evaluation -> 5. design -> 6. implementation -> 7. unit test -> 8. integeration & system test -> 9. operation and maintanence

-------------------------------------------------------------------
NOTE : if customer satisfaction fails at step 4 we go back to step 2
--------------------------------------------------------------------

Step 2 is quick design!


------------
explanation and notes will be given by sir later!
------------

========================================================================
			INCREMENTAL MODEL
========================================================================


gather all rquirement from the customer, include some functions and show it to customer and take input


------------------ ADVANTAGES ----------------------------
1. reduced risk of faliure
2. flexible and promote encourage innovation!
3. can be used to train users

------------------- DISADVANTAGES --------------------------
1. TIME TAKING
2. cost consuming
3. prototyping promote excessive change request leading to pain in ass for developer!

PHASES IN INCREMENTAL MODEL

1. COMMUNICATION
2. PLANNING
3. MODELLING (analysis and design)
4. CONSTRUCTION - (code and test)
5. DEPLOYMENT - (delivery and feedback)


=========================================================================
			ITERATIVE MODEL
========================================================================

This mdel has the same phases as the water fold model but with fewer restrictions. 
Usable product is released as the end of its cycle with its release provide additional functionality.

PHASES 
requirements -> design -> implementation and limit testing -> intergeration and system testing (release 1)
		|-> design -> implementation and limit testing -> intergeration and system testing (release 2)
		|-> design -> implementation and limit testing -> intergeration and system testing (release 3)
		 and so on

	(after every release the software is redsign and a more advance release is madea afterwards!)


============================================================================
			SPIRAL MODEL
============================================================================
its s generalzied model for the all other above mentioned models
unlike many other software process model, the spiral model incorporates the project risk factor.

I  -  deteermine obbjective, alternative contraints
II -  


in spiral model one phase is split roughly into four sector of major activities. 
1. planning - determinaton of objectives, alternatives and contraints
2. risk analysis - identify and resolve the risks.
3. development - product development and testing the product
4. assessment -






=============================================
UNIT 2 - REUIREMENT VALIDATION TEHNIQUE
=============================================

Rquirement reviews
Prototyping 


*********************************************
	UNIT - III SOFTWARE DESIGN
*********************************************

Defnition - higly significant phase in software development where the designer plans "how" a software should be producded in order to make it functional, reliable, reasonabbly easy to understand, modify and maintained.

-> Design involves transformation of ideas into deailed implementation descriptions, with a goal of satisfying with the software requiremnets (as spacified in the SRS document.)

TYPE OF DESIGN - 
1. TECHNICAL (HOW)
2. CONCEPTUAL DESIGN (WHAT)


-> Designers are intermediators between the coutomer and system builders. they prepare conceptual design that tells the customers exactly what the systemdo!
-> Once this is approved by the cutomer, the conceptual design is translated into a mucc more detailed document than the technical design that allow systme builders to understand the actual hardware and software needed to solve the customer problem.

-> conceptual design tells what the system will do, whereas the technical design tell us how to system will work!

***********************
Technical design explain
1. hardware implementation
2. software needs
3. communication interfaces
4. I/O of the system
5. software architecture
6. network architecture
7. any other thing tha translates requirement into a solution to the customers problem.

1. The design needs to be correct and complete 
2. Understanable
3. At the right level
4. Maintainable

THE FOLLOWING FIGURE SHOWS THE TRANSLATION OF INFORMAL DESIGN TO A DETAILED DESIGN

INFORMAL DESIGN OUTLINE -> INFORMAL DESIGN -> MORE FORMAL DESIGN -> FINISHED DESIGN

1. To negotiate system requirements, and to set expectations with customers, marketing, and management personnel. Act as a blueprint during the development process. Guide the implementation tasks, including detailed design, coding, integration, and testing. The basic objective of software engineering is to develop methods and procedures for software development that can scale up for large systems and that can be used consistently to produce high-quality software at low cost and with a small cycle of time

2. Design should also provide information what the software deliverables are and where should they be placed in the deployment. This information is very important for your customers as well as integration as they need to know where to look for your library/executable/whatever your software is about
The design phase of product or part development has quickly become essential to an organisation's strategy. The effectiveness and efficiency of the design phase can have a significant impact on processes such as manufacturing that occur downstream in the product development process

*****************************************
	PROBLEM PARTITIONING
*****************************************
DIVIDE & CONQUER

A modular system consist of well defined managaable units with well defined interfaces among the units
modularity is the single attribite of the application that allows the progrm to be intellectually manageable!!

 *****
slept in class after this!!
 *****


=========================================
	SEPERATION OF CONCERN
=========================================

Seperation of concern is a design concept that sugges that any complex prob can be more easil handled is it is divied into multiple sub-problems and/or optimized independently

A concern is a feature or behaviour that is specified as part of the requirements for the software. by seperating concern into smaller, and more manageable pieces, a problem takes lesser code and time to solve!

MODULARITY - is the most common manifestation of seperation of concerns. software is divided into named and addressable components, sometimes called modules, that are integerated to satisfy problem requirements.

> It can be said that modularity is a single attribute that allow a program to be more manageable.
> A system is considered modular if it consist of discrete components so that each components can be implemented indepedently.

SRS - DEALS WITH PROBLEM DEFINITION
SDD - DEALS WITH SOLUTION GIVEN IN SRS.

to produce modular design, we must have some criteria to select modules!
coupling and cohession are two modularisation criteria.

COUPLING - coupling is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are; the strength of the relationships between modules.
> two modules with high coupling are strongly interconnected and thus, depedenent on each other and inverse and vice-versa!
> coupling is high when inter-module call are more or amount of shared data is high!

COHESION - cohesion refers to the level of strength and unity with which different components of a software program are inter-related with each other.(with in thh model). 

|--------------------- NOTE --------------------|
| GOOD DESIGN = LOW COUPLING AND HIGH COHESION  |
|-----------------------------------------------|


Modularization: Modularization is the process of dividing a software system into multiple independent modules where each module works independently. There are many advantages of Modularization in software engineering. Some of these are given below:

> Easy to understand the system.
> System maintenance is easy.
> A module can be used many times as their requirements. No need to write it again and again.

Coupling: Coupling is the measure of the degree of interdependence between the modules. A good software will have low coupling.

Types of Coupling:

> Data Coupling: If the dependency between the modules is based on the fact that they communicate by passing only data, then the modules are said to be data coupled. In data coupling, the components are independent to each other and communicating through data. Module communications don’t contain tramp data. Example-customer billing system.

> Stamp Coupling In stamp coupling, the complete data structure is passed from one module to another module. Therefore, it involves tramp data. It may be necessary due to efficiency factors- this choice made by the insightful designer, not a lazy programmer.

> Control Coupling: If the modules communicate by passing control information, then they are said to be control coupled. It can be bad if parameters indicate completely different behavior and good if parameters allow factoring and reuse of functionality. Example- sort function that takes comparison function as an argument.
 >External Coupling: In external coupling, the modules depend on other modules, external to the software being developed or to a particular type of hardware. Ex- protocol, external file, device format, etc.

> Common Coupling: The modules have shared data such as global data structures.The changes in global data mean tracing back to all modules which access that data to evaluate the effect of the change. So it has got disadvantages like difficulty in reusing modules, reduced ability to control data accesses and reduced maintainability.

> Content Coupling: In a content coupling, one module can modify the data of another module or control flow is passed from one module to the other module. This is the worst form of coupling and should be avoided.


Cohesion: Cohesion is a measure of the degree to which the elements of the module are functionally related. It is the degree to which all elements directed towards performing a single task are contained in the component. Basically, cohesion is the internal glue that keeps the module together. A good software design will have high cohesion.

Types of Cohesion:

> Functional Cohesion: Every essential element for a single computation is contained in the component. A functional cohesion performs the task and functions. It is an ideal situation.

> Sequential Cohesion: An element outputs some data that becomes the input for other element, i.e., data flow between the parts. It occurs naturally in functional programming languages.

> Communicational Cohesion: Two elements operate on the same input data or contribute towards the same output data. Example- update record int the database and send it to the printer.

> Procedural Cohesion: Elements of procedural cohesion ensure the order of execution. Actions are still weakly connected and unlikely to be reusable. Ex- calculate student GPA, print student record, calculate cumulative GPA, print cumulative GPA.

> Temporal Cohesion: The elements are related by their timing involved. A module connected with temporal cohesion all the tasks must be executed in the same time-span. This cohesion contains the code for initializing all the parts of the system. Lots of different activities occur, all at init time.

> Logical Cohesion: The elements are logically related and not functionally. Ex- A component reads inputs from tape, disk, and network. All the code for these functions is in the same component. Operations are related, but the functions are significantly different.

> Coincidental Cohesion: The elements are not related(unrelated). The elements have no conceptual relationship other than location in source code. It is accidental and the worst form of cohesion. Ex- print next line and reverse the characters of a string in a single component.




